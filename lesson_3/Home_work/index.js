// Дайте ответ, что будет в результате выполнения данных ниже примеров. С объяснением, почему это так.

//'кот' > 'код';
// true , т.к. 'т' имеет большее значение.

// '2' + 2 * '2';
// "24",

// undefined == null
// true, данные значения могут быть равны друг другу либо самим себе.

// undefined != null;
// false, т.к. эти значения равны друг другу.

// null == 0
// false, null может быть равно null или undefined

// 2 > '3';
// false, при сравнении значений разных типов приводит каждое из них к числу.

// null - false + true
// 1, если null привести к логическому оператору то это false, false - false будет false(0) + true(1)

// 1 / "l"
// NaN,  число на строчное значение не делится.

// "2" * "3"
// 6,  оператор * вызывает численное преобразование строк

//4 + 5 + 'O';
// 9,

// "l" + 4 + 5
// "l45", оператор + выполняется слева направо, поэтому сначала выполнится выражение, оператор вызвал строковое преобразование

// "4" - 2
// 2,

// "4" - "4x"
// NaN,

// “23” == 23
// true, в данном случае эти значения равны

// null == false
// false, т.к. null равен только undefined, либо самому себе.

// " -4 "/ 0 + 1
// -4,

// null + 1
// 1, если null перевести в числовое значение будет 0.

//undefined + null
// NaN, при численном преобразовании undefined это NaN

// 1 === “1”
// false, т.к. при строгом равенстве строка не может быть равна числовому значению.

// “2” > 10
// false, при сравнении значений разных типов приводит каждое из них к числу.

// NaN == undefined
// false, т.к. undefined равно самому себе или null.
